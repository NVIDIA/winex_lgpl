# Global rules for building dlls     -*-Makefile-*-
#
# Each individual makefile should define the following variables:
# MODULE       : name of the main module being built
# ALTNAMES     : alternate names for this dll (optional)
# IMPORTS      : dlls to import (optional)
# EXTRALIBS    : extra libraries to link in (optional)
# EXTRATARGETS : other pieces to build in that directory
# MULTILIBS    : additional dlls built in this directory (optional)
#
# plus all variables required by the global Make.rules.in
#

DLLFLAGS   = @DLLFLAGS@
DEFS       = -D__WINE__ $(EXTRADEFS)
LIBEXT     = @LIBEXT@
IMPORTLIBS = $(IMPORTS:%=$(DLLDIR)/lib%.$(LIBEXT))
SPEC_SRCS  = $(ALTNAMES:%=%.spec)
ALL_OBJS   = $(OBJDIR)/$(MODULE).spec.o $(OBJS)
ALL_LIBS   = $(LIBWINE) $(EXTRALIBS) $(LIBS)
DLLTOOL    = @DLLTOOL@
CROSSLIB   = lib$(MODULE).cross.a
PRELINK    = @PRELINK@
@DARWIN_TRUE@LDDLLFLAGS += -init ___macho_linker_init -fno-common

ifndef DISABLEDEFAULTMODULE
all: lib$(MODULE).$(LIBEXT)
endif

all: $(MULTILIBS:%=lib%.$(LIBEXT)) $(EXTRATARGETS)

@MAKE_RULES@

ifdef CXX_SRCS
SHARED_LINKER := $(LDCXXSHARED)
else
SHARED_LINKER := $(LDSHARED)
endif


# Rule for shared libraries defined as a template so they can be used for multiple targets
#    $(1) - object directory
#    $(2) - target library name    
#    $(3) - objects

########################
# Begin LDSHARED_template
define LDSHARED_template

$(1)/$$(MODULE).spec.o: | $(1)/

lib$(2).$$(LIBEXT): $(3) Makefile.in
	-rm -f $$@
	$$(SHARED_LINKER) @PACKAGE_LINK_TEMPLATE@ $$(LDDLLFLAGS) $(3) -o $$@ -L$$(DLLDIR) $$(IMPORTS:%=-l%) $$(ALL_LIBS)
ifdef PRELINK_ADDR
ifneq ($$(PRELINK),none)
	$$(PRELINK) --reloc-only $$(PRELINK_ADDR) $$@
	# Prelink sets the modification time on the file using a low precision call (utime)
	# which can set the mod time to some time in the past (or the future) causing
	# files to be rebuilt unnecessarily
	# FIXME: remove this line when prelink is fixed
	touch $$@
endif
endif

endef
# End of LDSHARED_template
########################

# Set up build rule for default target
$(eval $(call LDSHARED_template,$(OBJDIR),$(MODULE),$(ALL_OBJS)))

# Rules for .dll files

lib$(MODULE).dll: $(ALL_OBJS) Makefile.in
	$(DLLWRAP) $(DLLWRAPFLAGS) --implib lib$(MODULE).a -o lib$(MODULE).dll $(ALL_OBJS) -L$(DLLDIR) $(IMPORTS:%=-l%) $(ALL_LIBS)

# Rules for cross-build import libs
$(CROSSLIB) : $(MODULE).spec.def
	[ "$(NEEDCROSSLIB)" = "" ] || $(DLLTOOL) -k -d $(MODULE).spec.def -D $(MODULE).dll -l $(CROSSLIB)
	[ "$(NEEDCROSSLIB)" = "" ] || ln -f $(CROSSLIB) $(TOPOBJDIR)/libcross/lib$(MODULE).a

crosslib:: $(CROSSLIB)

# Rules for checking that no imports are missing

checklink:: lib$(MODULE).$(LIBEXT)
	$(CC) -o checklink $(TOPSRCDIR)/library/checklink.c -L. -l$(MODULE) $(ALL_LIBS) && $(RM) checklink

# Rules for testing

check test:: $(SUBDIRS:%=%/__test__)

crosstest:: $(SUBDIRS:%=%/__crosstest__)

# Rules for debug channels

debug_channels: dummy
	$(TOPSRCDIR)/tools/make_debug $(MODULE).spec $(C_SRCS) $(SUBDIRS:%=%/*.c)

# Sanity check

Makedll.rules: $(TOPSRCDIR)/Makedll.rules.in $(TOPSRCDIR)/configure
	@echo $? is newer than 'Makedll.rules', please rerun ./configure!
	@exit 1  

# Rules for installation

.PHONY: install_lib $(ALTNAMES:%=_install_/lib%.$(LIBEXT)) $(MULTILIBS:%=_install_/lib%.$(LIBEXT))

$(ALTNAMES:%=_install_/lib%.$(LIBEXT)): install_lib
	cd $(libdir) && $(RM) `basename $@` && $(LN_S) lib$(MODULE).$(LIBEXT) `basename $@`

$(MULTILIBS:%=_install_/lib%.$(LIBEXT)): install_lib
	$(INSTALL_PROGRAM) `basename $@` $(libdir)/`basename $@`

install_lib:

ifndef DISABLEDEFAULTMODULE
install_lib: lib$(MODULE).$(LIBEXT)
	[ -d $(libdir) ] || $(MKDIR) $(libdir)
	$(INSTALL_PROGRAM) lib$(MODULE).$(LIBEXT) $(libdir)/lib$(MODULE).$(LIBEXT)
endif

install:: install_lib $(ALTNAMES:%=_install_/lib%.$(LIBEXT)) $(MULTILIBS:%=_install_/lib%.$(LIBEXT))

uninstall::
	cd $(libdir) && $(RM) lib$(MODULE).$(LIBEXT) $(ALTNAMES:%=lib%.$(LIBEXT)) $(MULTILIBS:%=lib%.$(LIBEXT))

# End of global dll rules
