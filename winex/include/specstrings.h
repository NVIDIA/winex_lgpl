#ifndef __WINE_SPECSTRINGS_H
#define __WINE_SPECSTRINGS_H

#define __ecount(size)
#define __bcount(size)
#define __xcount(size)
#define __in
#define __in_ecount(size)
#define __in_bcount(size)
#define __in_xcount(size)
#define __in_z
#define __in_ecount_z(size)
#define __in_bcount_z(size)
#define __out
#define __out_ecount(size)
#define __out_bcount(size)
#define __out_xcount(size)
#define __out_ecount_part(size,len)
#define __out_bcount_part(size,len)
#define __out_xcount_part(size,len)
#define __out_ecount_full(size)
#define __out_bcount_full(size)
#define __out_xcount_full(size)
#define __out_z
#define __out_ecount_z(size)
#define __out_bcount_z(size)
#define __inout
#define __inout_ecount(size)
#define __inout_bcount(size)
#define __inout_xcount(size)
#define __inout_ecount_part(size,len)
#define __inout_bcount_part(size,len)
#define __inout_xcount_part(size,len)
#define __inout_ecount_full(size)
#define __inout_bcount_full(size)
#define __inout_xcount_full(size)
#define __inout_z
#define __inout_ecount_z(size)
#define __inout_bcount_z(size)
#define __ecount_opt(size)
#define __bcount_opt(size)
#define __xcount_opt(size)
#define __in_opt
#define __in_ecount_opt(size)
#define __in_bcount_opt(size)
#define __in_z_opt
#define __in_ecount_z_opt(size)
#define __in_bcount_z_opt(size)
#define __in_xcount_opt(size)
#define __out_opt
#define __out_ecount_opt(size)
#define __out_bcount_opt(size)
#define __out_xcount_opt(size)
#define __out_ecount_part_opt(size,len)
#define __out_bcount_part_opt(size,len)
#define __out_xcount_part_opt(size,len)
#define __out_ecount_full_opt(size)
#define __out_bcount_full_opt(size)
#define __out_xcount_full_opt(size)
#define __out_ecount_z_opt(size)
#define __out_bcount_z_opt(size)
#define __inout_opt
#define __inout_ecount_opt(size)
#define __inout_bcount_opt(size)
#define __inout_xcount_opt(size)
#define __inout_ecount_part_opt(size,len)
#define __inout_bcount_part_opt(size,len)
#define __inout_xcount_part_opt(size,len)
#define __inout_ecount_full_opt(size)
#define __inout_bcount_full_opt(size)
#define __inout_xcount_full_opt(size)
#define __inout_z_opt
#define __inout_ecount_z_opt(size)
#define __inout_ecount_z_opt(size)
#define __inout_bcount_z_opt(size)
#define __deref_ecount(size)
#define __deref_bcount(size)
#define __deref_xcount(size)
#define __deref_in
#define __deref_in_ecount(size)
#define __deref_in_bcount(size)
#define __deref_in_xcount(size)
#define __deref_out
#define __deref_out_ecount(size)
#define __deref_out_bcount(size)
#define __deref_out_xcount(size)
#define __deref_out_ecount_part(size,len)
#define __deref_out_bcount_part(size,len)
#define __deref_out_xcount_part(size,len)
#define __deref_out_ecount_full(size)
#define __deref_out_bcount_full(size)
#define __deref_out_xcount_full(size)
#define __deref_out_z
#define __deref_out_ecount_z(size)
#define __deref_out_bcount_z(size)
#define __deref_out_xcount(size)
#define __deref_inout
#define __deref_inout_ecount(size)
#define __deref_inout_bcount(size)
#define __deref_inout_xcount(size)
#define __deref_inout_ecount_part(size,len)
#define __deref_inout_bcount_part(size,len)
#define __deref_inout_xcount_part(size,len)
#define __deref_inout_ecount_full(size)
#define __deref_inout_bcount_full(size)
#define __deref_inout_xcount_full(size)
#define __deref_inout_z
#define __deref_inout_ecount_z(size)
#define __deref_inout_bcount_z(size)
#define __deref_ecount_opt(size)
#define __deref_bcount_opt(size)
#define __deref_xcount_opt(size)
#define __deref_in_opt
#define __deref_in_ecount_opt(size)
#define __deref_in_bcount_opt(size)
#define __deref_in_xcount_opt(size)
#define __deref_out_opt
#define __deref_out_ecount_opt(size)
#define __deref_out_bcount_opt(size)
#define __deref_out_xcount_opt(size)
#define __deref_out_ecount_part_opt(size,len)
#define __deref_out_bcount_part_opt(size,len)
#define __deref_out_xcount_part_opt(size,len)
#define __deref_out_ecount_full_opt(size)
#define __deref_out_bcount_full_opt(size)
#define __deref_out_xcount_full_opt(size)
#define __deref_out_z_opt
#define __deref_out_ecount_z_opt(size)
#define __deref_out_bcount_z_opt(size)
#define __deref_inout_opt
#define __deref_inout_ecount_opt(size)
#define __deref_inout_bcount_opt(size)
#define __deref_inout_xcount_opt(size)
#define __deref_inout_ecount_part_opt(size,len)
#define __deref_inout_bcount_part_opt(size,len)
#define __deref_inout_xcount_part_opt(size,len)
#define __deref_inout_ecount_full_opt(size)
#define __deref_inout_bcount_full_opt(size)
#define __deref_inout_xcount_full_opt(size)
#define __deref_inout_z_opt
#define __deref_inout_ecount_z_opt(size)
#define __deref_inout_bcount_z_opt(size)
#define __deref_opt_ecount(size)
#define __deref_opt_bcount(size)
#define __deref_opt_xcount(size)
#define __deref_opt_in
#define __deref_opt_in_ecount(size)
#define __deref_opt_in_bcount(size)
#define __deref_opt_in_xcount(size)
#define __deref_opt_out
#define __deref_opt_out_ecount(size)
#define __deref_opt_out_bcount(size)
#define __deref_opt_out_xcount(size)
#define __deref_opt_out_ecount_part(size,len)
#define __deref_opt_out_bcount_part(size,len)
#define __deref_opt_out_xcount_part(size,len)
#define __deref_opt_out_ecount_full(size)
#define __deref_opt_out_bcount_full(size)
#define __deref_opt_out_xcount_full(size)
#define __deref_opt_inout
#define __deref_opt_inout_ecount(size)
#define __deref_opt_inout_bcount(size)
#define __deref_opt_inout_xcount(size)
#define __deref_opt_inout_ecount_part(size,len)
#define __deref_opt_inout_bcount_part(size,len)
#define __deref_opt_inout_xcount_part(size,len)
#define __deref_opt_inout_ecount_full(size)
#define __deref_opt_inout_bcount_full(size)
#define __deref_opt_inout_xcount_full(size)
#define __deref_opt_inout_z
#define __deref_opt_inout_ecount_z(size)
#define __deref_opt_inout_bcount_z(size)
#define __deref_opt_ecount_opt(size)
#define __deref_opt_bcount_opt(size)
#define __deref_opt_xcount_opt(size)
#define __deref_opt_in_opt
#define __deref_opt_in_ecount_opt(size)
#define __deref_opt_in_bcount_opt(size)
#define __deref_opt_in_xcount_opt(size)
#define __deref_opt_out_opt
#define __deref_opt_out_ecount_opt(size)
#define __deref_opt_out_bcount_opt(size)
#define __deref_opt_out_xcount_opt(size)
#define __deref_opt_out_ecount_part_opt(size,len)
#define __deref_opt_out_bcount_part_opt(size,len)
#define __deref_opt_out_xcount_part_opt(size,len)
#define __deref_opt_out_ecount_full_opt(size)
#define __deref_opt_out_bcount_full_opt(size)
#define __deref_opt_out_xcount_full_opt(size)
#define __deref_opt_out_z_opt
#define __deref_opt_out_ecount_z_opt(size)
#define __deref_opt_out_bcount_z_opt(size)
#define __deref_opt_inout_opt
#define __deref_opt_inout_ecount_opt(size)
#define __deref_opt_inout_bcount_opt(size)
#define __deref_opt_inout_xcount_opt(size)
#define __deref_opt_inout_ecount_part_opt(size,len)
#define __deref_opt_inout_bcount_part_opt(size,len)
#define __deref_opt_inout_xcount_part_opt(size,len)
#define __deref_opt_inout_ecount_full_opt(size)
#define __deref_opt_inout_bcount_full_opt(size)
#define __deref_opt_inout_xcount_full_opt(size)
#define __deref_opt_inout_z_opt
#define __deref_opt_inout_ecount_z_opt(size)
#define __deref_opt_inout_bcount_z_opt(size)

#define __field_ecount(size)
#define __field_bcount(size)
#define __field_xcount(size)
#define __field_ecount_opt(size)
#define __field_bcount_opt(size)
#define __field_xcount_opt(size)
#define __field_ecount_part(size,init)
#define __field_bcount_part(size,init)
#define __field_xcount_part(size,init)
#define __field_ecount_part_opt(size,init)
#define __field_bcount_part_opt(size,init)
#define __field_xcount_part_opt(size,init)
#define __field_ecount_full(size)
#define __field_bcount_full(size)
#define __field_xcount_full(size)
#define __field_ecount_full_opt(size)
#define __field_bcount_full_opt(size)
#define __field_xcount_full_opt(size)
#define __field_nullterminated
#define __struct_bcount(size)
#define __struct_xcount(size)

#define __out_awcount(expr,size)
#define __in_awcount(expr,size)
#define __post_invalid
#define __allocator
#define __deallocate(kind)
#define __deallocate_opt(kind)
#define __bound
#define __range(lb,ub)
#define __in_bound
#define __out_bound
#define __deref_out_bound
#define __in_range(lb,ub)
#define __out_range(lb,ub)
#define __deref_in_range(lb,ub)
#define __deref_out_range(lb,ub)
#define __deref_inout_range(lb,ub)
#define __field_range(lb,ub)
#define __field_data_source(src_sym)

#define __range_max(a,b)
#define __range_min(a,b)

#define __in_data_source(src_sym)
#define __out_data_source(src_sym)
#define __out_validated(typ_sym)
#define __this_out_data_source(src_sym)
#define __this_out_validated(typ_sym)
#define __transfer(formal)
#define __rpc_entry
#define __kernel_entry
#define __gdi_entry
#define __encoded_pointer
#define __encoded_array
#define __field_encoded_pointer
#define __field_encoded_array
#define __type_has_adt_prop(adt,prop)
#define __out_has_adt_prop(adt,prop)
#define __out_not_has_adt_prop(adt,prop)
#define __out_transfer_adt_prop(arg)
#define __out_has_type_adt_props(typ)

/* this symbol is used in a lot of win32 headers as a parameter annotation, but is unfortunately
   also used as a struct member variable name in a lot of Mac CoreFoundation headers.  Defining
   this just leads to a ton of compile errors in files that include both win32 and CF headers.
   Normally this header is supposed to be included from 'winnt.h' just after the DUMMYUNION*
   symbols are defined.  However, because of the number of files that include CF headers, we
   can't safely do that.  There are also other symbols in here with similar issues (ie: __out,
   __in, etc).  To avoid all of the potential problems, we'll just directly include this header
   before any win32 header that needs its symbols. */
#define __reserved

#define __success(condition)
#define __drv_maxIRQL(irql)

#endif /* __WINE_SPECSTRINGS_H */

